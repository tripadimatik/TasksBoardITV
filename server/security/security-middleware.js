const helmet = require('helmet');
const cors = require('cors');
const securityConfig = require('./security-config');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

// Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const securityMiddleware = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  setupHelmet: () => {
    return helmet(securityConfig.helmetConfig);
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  setupCORS: () => {
    return cors({
      origin: (origin, callback) => {
        if (securityConfig.validateOrigin(origin)) {
          callback(null, true);
        } else {
          console.warn(`üö® –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω CORS –∑–∞–ø—Ä–æ—Å —Å origin: ${origin}`);
          callback(new Error('–ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ CORS –ø–æ–ª–∏—Ç–∏–∫–æ–π'));
        }
      },
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
      maxAge: 86400 // 24 —á–∞—Å–∞
    });
  },

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  validateAndSanitize: (req, res, next) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
      const checkForSQLInjection = (obj) => {
        for (const key in obj) {
          if (typeof obj[key] === 'string') {
            if (securityConfig.detectSQLInjection(obj[key])) {
              securityConfig.logSuspiciousActivity(req, 'SQL_INJECTION_ATTEMPT', {
                field: key,
                value: obj[key]
              });
              return res.status(400).json({ 
                error: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏' 
              });
            }
          } else if (typeof obj[key] === 'object' && obj[key] !== null) {
            checkForSQLInjection(obj[key]);
          }
        }
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º body, query –∏ params
      if (req.body) checkForSQLInjection(req.body);
      if (req.query) checkForSQLInjection(req.query);
      if (req.params) checkForSQLInjection(req.params);

      // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      if (req.body) {
        req.body = securityConfig.sanitizeInput(req.body);
      }
      if (req.query) {
        req.query = securityConfig.sanitizeInput(req.query);
      }

      next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö' });
    }
  },

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è JWT
  authenticateToken: (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
      if (!token.match(/^[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+$/)) {
        securityConfig.logSuspiciousActivity(req, 'INVALID_TOKEN_FORMAT', { token });
        return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞' });
      }

      jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) {
          if (err.name === 'TokenExpiredError') {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' });
          } else if (err.name === 'JsonWebTokenError') {
            securityConfig.logSuspiciousActivity(req, 'INVALID_TOKEN', { error: err.message });
            return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
          }
          return res.status(403).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —Ç–æ–∫–µ–Ω–µ
        if (!user.id || !user.email) {
          securityConfig.logSuspiciousActivity(req, 'MALFORMED_TOKEN_PAYLOAD', { user });
          return res.status(401).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–∫–µ–Ω–µ' });
        }

        req.user = user;
        next();
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
  requireRole: (allowedRoles) => {
    return (req, res, next) => {
      if (!req.user) {
        return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' });
      }

      if (!req.user.role || !allowedRoles.includes(req.user.role)) {
        securityConfig.logSuspiciousActivity(req, 'UNAUTHORIZED_ROLE_ACCESS', {
          userRole: req.user.role,
          requiredRoles: allowedRoles,
          userId: req.user.id
        });
        return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
      }

      next();
    };
  },

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  validateRegistration: (req, res, next) => {
    const { email, password, firstName, lastName } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if (!email || !securityConfig.validateEmail(email)) {
      return res.status(400).json({ 
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if (!password || !securityConfig.validatePassword(password)) {
      return res.status(400).json({ 
        error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
    if (!firstName || firstName.trim().length < 2 || firstName.trim().length > 50) {
      return res.status(400).json({ 
        error: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–º–∏–ª–∏–∏
    if (!lastName || lastName.trim().length < 2 || lastName.trim().length > 50) {
      return res.status(400).json({ 
        error: '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏
    if (!/^[a-zA-Z–∞-—è–ê-–Ø\s\-']+$/.test(firstName.trim())) {
      return res.status(400).json({ 
        error: '–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ñ–∞–º–∏–ª–∏–∏
    if (!/^[a-zA-Z–∞-—è–ê-–Ø\s\-']+$/.test(lastName.trim())) {
      return res.status(400).json({ 
        error: '–§–∞–º–∏–ª–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã' 
      });
    }

    next();
  },

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞
  validateLogin: (req, res, next) => {
    const { email, password } = req.body;

    if (!email || !securityConfig.validateEmail(email)) {
      return res.status(400).json({ 
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å' 
      });
    }

    if (!password || password.length < 1) {
      return res.status(400).json({ 
        error: '–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' 
      });
    }

    next();
  },

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –ø–∞—Ä–æ–ª–µ–π
  bruteForceProtection: (req, res, next) => {
    const ip = req.ip || req.connection.remoteAddress;
    const key = `login_attempts_${ip}`;
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ in-memory store
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ Redis)
    if (!global.loginAttempts) {
      global.loginAttempts = new Map();
    }

    const attempts = global.loginAttempts.get(key) || { count: 0, lastAttempt: Date.now() };
    const now = Date.now();
    const timeDiff = now - attempts.lastAttempt;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
    if (timeDiff > 15 * 60 * 1000) {
      attempts.count = 0;
    }

    if (attempts.count >= 5) {
      securityConfig.logSuspiciousActivity(req, 'BRUTE_FORCE_ATTEMPT', {
        ip: ip,
        attempts: attempts.count
      });
      return res.status(429).json({ 
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.' 
      });
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
    req.incrementLoginAttempts = () => {
      attempts.count++;
      attempts.lastAttempt = now;
      global.loginAttempts.set(key, attempts);
    };

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
    req.resetLoginAttempts = () => {
      global.loginAttempts.delete(key);
    };

    next();
  },

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  securityLogger: (req, res, next) => {
    const startTime = Date.now();
    
    res.on('finish', () => {
      const duration = Date.now() - startTime;
      const logData = {
        timestamp: new Date().toISOString(),
        method: req.method,
        url: req.originalUrl,
        ip: req.ip || req.connection.remoteAddress,
        userAgent: req.get('User-Agent'),
        statusCode: res.statusCode,
        duration: duration,
        userId: req.user ? req.user.id : null
      };

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      if (res.statusCode >= 400 || duration > 5000) {
        console.warn('‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', JSON.stringify(logData, null, 2));
      }
    });

    next();
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
  validateFileUpload: (req, res, next) => {
    if (req.file) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
      if (req.file.size > 10 * 1024 * 1024) {
        return res.status(400).json({ 
          error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB' 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      const allowedMimeTypes = [
        'text/plain',
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'image/jpeg',
        'image/png',
        'image/gif'
      ];

      if (!allowedMimeTypes.includes(req.file.mimetype)) {
        return res.status(400).json({ 
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞' 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      if (!/^[a-zA-Z0-9._\-\s()]+$/.test(req.file.originalname)) {
        return res.status(400).json({ 
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞' 
        });
      }
    }

    next();
  }
};

module.exports = securityMiddleware;