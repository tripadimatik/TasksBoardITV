// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL API
const API_BASE_URL = (() => {
  const currentHost = window.location.hostname;
  const currentProtocol = window.location.protocol;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ API URL:');
  console.log('- –¢–µ–∫—É—â–∏–π —Ö–æ—Å—Ç:', currentHost);
  console.log('- –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª:', currentProtocol);
  console.log('- VITE_API_URL:', import.meta.env.VITE_API_URL);
  
  // –ï—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ HTTPS, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS –¥–ª—è API
  if (currentProtocol === 'https:') {
    const apiUrl = `https://${currentHost}:3002/api`;
    console.log('- –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTPS –¥–ª—è API:', apiUrl);
    return apiUrl;
  }
  
  // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–¥–µ—Ç —Å IP-–∞–¥—Ä–µ—Å–∞ (–Ω–µ localhost), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ IP –¥–ª—è API —Å HTTP
  if (currentHost !== 'localhost' && currentHost !== '127.0.0.1') {
    const apiUrl = `http://${currentHost}:3001/api`;
    console.log('- –ò—Å–ø–æ–ª—å–∑—É–µ–º IP-–∞–¥—Ä–µ—Å –¥–ª—è API (HTTP):', apiUrl);
    return apiUrl;
  }
  
  // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (import.meta.env.VITE_API_URL) {
    console.log('- –ò—Å–ø–æ–ª—å–∑—É–µ–º VITE_API_URL:', import.meta.env.VITE_API_URL);
    return import.meta.env.VITE_API_URL;
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost —Å HTTP
  const defaultUrl = 'http://localhost:3001/api';
  console.log('- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (HTTP):', defaultUrl);
  return defaultUrl;
})();

console.log('üåê –ò—Ç–æ–≥–æ–≤—ã–π API_BASE_URL:', API_BASE_URL);

import { TaskStatus, TaskPriority, UserRole, TaskStatusEn, TaskPriorityEn, UserRoleEn, TaskStatusRu, TaskPriorityRu, UserRoleRu, isRussianStatus, isRussianPriority } from './types';
import { 
  sanitizeHtml, 
  validateEmail, 
  validatePassword, 
  validateName, 
  sanitizeInput, 
  detectSuspiciousPatterns, 
  safeJsonParse, 
  isValidToken, 
  logSuspiciousActivity 
} from './security';

export interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  patronymic?: string;
  role: UserRole;
  createdAt: string;
  updatedAt: string;
}

export interface Task {
  id: string;
  title: string;
  description: string;
  priority: TaskPriority;
  deadline: string | null;
  status: TaskStatus;
  assigneeId: string | null;
  assigneeName: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  reportFile?: {
    name: string;
    url: string;
    uploadedAt: string;
    size?: number;
    comment?: string;
    isTextReport?: boolean;
    content?: string;
  } | null;
  archived?: boolean;
  createdAt: string;
  updatedAt: string;
  assignee?: User | null;
  creator?: User | null;
}

export interface AuthResponse {
  token: string;
  user: User;
}

class ApiClient {
  private getAuthHeaders(): HeadersInit {
    const token = localStorage.getItem('authToken');
    return {
      'Content-Type': 'application/json',
      ...(token && { Authorization: `Bearer ${token}` })
    };
  }

  private getFormDataHeaders(): HeadersInit {
    const token = localStorage.getItem('authToken');
    return {
      ...(token && { Authorization: `Bearer ${token}` })
    };
  }

  private async handleResponse<T>(response: Response): Promise<T> {
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞:', {
      status: response.status,
      statusText: response.statusText,
      url: response.url,
      ok: response.ok
    });
    
    if (!response.ok) {
      let errorData;
      try {
        errorData = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
      } catch (e) {
        errorData = { message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É:', e);
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ error, –∏ message –ø–æ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const errorMessage = errorData.error || errorData.message || `HTTP error! status: ${response.status}`;
      throw new Error(errorMessage);
    }
    
    try {
      const data = await response.json();
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
      return data;
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
      throw new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  }

  // === AUTH METHODS ===

  async register(userData: {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    patronymic?: string;
    role?: string;
  }): Promise<AuthResponse> {
    console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { email: userData.email, apiUrl: `${API_BASE_URL}/auth/register` });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!validateEmail(userData.email)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
    }

    const passwordValidation = validatePassword(userData.password);
    if (!passwordValidation.isValid) {
      throw new Error(passwordValidation.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    }

    const firstNameValidation = validateName(userData.firstName);
    if (!firstNameValidation.isValid) {
      throw new Error(firstNameValidation.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è');
    }

    const lastNameValidation = validateName(userData.lastName);
    if (!lastNameValidation.isValid) {
      throw new Error(lastNameValidation.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (detectSuspiciousPatterns(userData.email) || 
        detectSuspiciousPatterns(userData.firstName) || 
        detectSuspiciousPatterns(userData.lastName) ||
        (userData.patronymic && detectSuspiciousPatterns(userData.patronymic))) {
      logSuspiciousActivity('–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', { email: userData.email });
      throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö');
    }

    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const sanitizedUserData = {
      email: sanitizeInput(userData.email.toLowerCase().trim(), 254),
      password: userData.password,
      firstName: sanitizeInput(userData.firstName.trim(), 50),
      lastName: sanitizeInput(userData.lastName.trim(), 50),
      patronymic: userData.patronymic ? sanitizeInput(userData.patronymic.trim(), 50) : undefined,
      role: userData.role
    };
    
    try {
      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(sanitizedUserData)
      });
      
      console.log('üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', response.status, response.statusText);
      
      const data = await this.handleResponse<AuthResponse>(response);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
      if (!isValidToken(data.token)) {
        logSuspiciousActivity('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        throw new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }
      
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async login(email: string, password: string): Promise<AuthResponse> {
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { email, apiUrl: `${API_BASE_URL}/auth/login` });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!validateEmail(email)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
    }

    if (!password || password.length < 1) {
      throw new Error('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (detectSuspiciousPatterns(email)) {
      logSuspiciousActivity('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º email', { email });
      throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ email');
    }

    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è email
    const sanitizedEmail = sanitizeInput(email.toLowerCase().trim(), 254);
    
    try {
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          email: sanitizedEmail, 
          password 
        })
      });
      
      console.log('üîê –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Ö–æ–¥:', response.status, response.statusText);
      
      const data = await this.handleResponse<AuthResponse>(response);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
      if (!isValidToken(data.token)) {
        logSuspiciousActivity('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –≤—Ö–æ–¥–µ');
        throw new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }
      
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
      throw error;
    }
  }

  async getCurrentUser(): Promise<User> {
    const response = await fetch(`${API_BASE_URL}/auth/me`, {
      headers: this.getAuthHeaders()
    });
    
    return this.handleResponse<User>(response);
  }

  async updateUser(userId: string, userData: Partial<User>): Promise<User> {
    console.log('üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, userData });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!userId || typeof userId !== 'string' || userId.trim().length === 0) {
      throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (userData.email !== undefined) {
      if (!validateEmail(userData.email)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
      }
      
      if (detectSuspiciousPatterns(userData.email)) {
        logSuspiciousActivity('–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º email', { userId, email: userData.email });
        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ email');
      }
    }
    
    if (userData.firstName !== undefined) {
      const firstNameValidation = validateName(userData.firstName);
      if (!firstNameValidation.isValid) {
        throw new Error(firstNameValidation.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è');
      }
      
      if (detectSuspiciousPatterns(userData.firstName)) {
        logSuspiciousActivity('–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º', { userId });
        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏');
      }
    }
    
    if (userData.lastName !== undefined) {
      const lastNameValidation = validateName(userData.lastName);
      if (!lastNameValidation.isValid) {
        throw new Error(lastNameValidation.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è');
      }
      
      if (detectSuspiciousPatterns(userData.lastName)) {
        logSuspiciousActivity('–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∞–º–∏–ª–∏–µ–π', { userId });
        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ñ–∞–º–∏–ª–∏–∏');
      }
    }
    
    if (userData.patronymic !== undefined && userData.patronymic !== null) {
      const patronymicValidation = validateName(userData.patronymic);
      if (!patronymicValidation.isValid) {
        throw new Error(patronymicValidation.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ');
      }
      
      if (detectSuspiciousPatterns(userData.patronymic)) {
        logSuspiciousActivity('–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –æ—Ç—á–µ—Å—Ç–≤–æ–º', { userId });
        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –æ—Ç—á–µ—Å—Ç–≤–µ');
      }
    }
    
    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const sanitizedUserData = { ...userData };
    if (userData.email !== undefined) {
      sanitizedUserData.email = sanitizeInput(userData.email.toLowerCase().trim(), 254);
    }
    if (userData.firstName !== undefined) {
      sanitizedUserData.firstName = sanitizeInput(userData.firstName.trim(), 50);
    }
    if (userData.lastName !== undefined) {
      sanitizedUserData.lastName = sanitizeInput(userData.lastName.trim(), 50);
    }
    if (userData.patronymic !== undefined && userData.patronymic !== null) {
      sanitizedUserData.patronymic = sanitizeInput(userData.patronymic.trim(), 50);
    }
    
    try {
      const response = await fetch(`${API_BASE_URL}/users/${encodeURIComponent(userId)}`, {
        method: 'PUT',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(sanitizedUserData)
      });
      
      console.log('üë§ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.status, response.statusText);
      
      return this.handleResponse<User>(response);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // === USER METHODS ===

  async getUsers(role?: string): Promise<User[]> {
    const url = new URL(`${API_BASE_URL}/users`);
    if (role) {
      url.searchParams.append('role', role);
    }
    
    const response = await fetch(url.toString(), {
      headers: this.getAuthHeaders()
    });
    
    const data = await this.handleResponse<{ users: User[]; pagination?: any }>(response);
    return data.users || [];
  }

  // === TASK METHODS ===

  async getTasks(includeArchived: boolean = false): Promise<Task[]> {
    const url = new URL(`${API_BASE_URL}/tasks`);
    if (includeArchived) {
      url.searchParams.append('includeArchived', 'true');
    }
    
    const response = await fetch(url.toString(), {
      headers: this.getAuthHeaders()
    });
    
    const data = await this.handleResponse<{ tasks: Task[]; pagination?: any }>(response);
    return data.tasks || [];
  }

  async createTask(taskData: {
    title: string;
    description?: string;
    priority?: string;
    deadline?: string;
    assigneeId?: string;
    assigneeName?: string;
  }): Promise<Task> {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', taskData);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
    if (!taskData.title || taskData.title.trim().length === 0) {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }
    
    if (taskData.title.length > 200) {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)');
    }
    
    if (taskData.description && taskData.description.length > 2000) {
      throw new Error('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (detectSuspiciousPatterns(taskData.title) || 
        (taskData.description && detectSuspiciousPatterns(taskData.description))) {
      logSuspiciousActivity('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', { title: taskData.title });
      throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏');
    }
    
    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const sanitizedTaskData = {
      ...taskData,
      title: sanitizeInput(taskData.title.trim(), 200),
      description: taskData.description ? sanitizeInput(taskData.description.trim(), 2000) : taskData.description
    };
    
    try {
      const response = await fetch(`${API_BASE_URL}/tasks`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(sanitizedTaskData)
      });
      
      console.log('üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', response.status, response.statusText);
      
      return this.handleResponse<Task>(response);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
      throw error;
    }
  }

  async updateTask(taskId: string, updates: Partial<Task>): Promise<Task> {
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', { taskId, updates });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID –∑–∞–¥–∞—á–∏
    if (!taskId || typeof taskId !== 'string' || taskId.trim().length === 0) {
      throw new Error('ID –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (updates.title !== undefined) {
      if (!updates.title || updates.title.trim().length === 0) {
        throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }
      
      if (updates.title.length > 200) {
        throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)');
      }
      
      if (detectSuspiciousPatterns(updates.title)) {
        logSuspiciousActivity('–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º', { taskId, title: updates.title });
        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
      }
    }
    
    if (updates.description !== undefined && updates.description !== null) {
      if (updates.description.length > 2000) {
        throw new Error('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)');
      }
      
      if (detectSuspiciousPatterns(updates.description)) {
        logSuspiciousActivity('–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º', { taskId });
        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
      }
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è deadline
    if (updates.deadline !== undefined) {
      if (updates.deadline !== null && updates.deadline !== '') {
        const deadlineDate = new Date(updates.deadline);
        if (isNaN(deadlineDate.getTime())) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞');
        }
      }
    }
    
    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const sanitizedUpdates = { ...updates };
    if (updates.title !== undefined) {
      sanitizedUpdates.title = sanitizeInput(updates.title.trim(), 200);
    }
    if (updates.description !== undefined && updates.description !== null) {
      sanitizedUpdates.description = sanitizeInput(updates.description.trim(), 2000);
    }
    if (updates.deadline !== undefined) {
      // –û—Å—Ç–∞–≤–ª—è–µ–º deadline –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
      sanitizedUpdates.deadline = updates.deadline;
    }
    
    try {
      const response = await fetch(`${API_BASE_URL}/tasks/${encodeURIComponent(taskId)}`, {
        method: 'PUT',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(sanitizedUpdates)
      });
      
      console.log('üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', response.status, response.statusText);
      
      return this.handleResponse<Task>(response);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
      throw error;
    }
  }

  async deleteTask(taskId: string): Promise<{ message: string }> {
    const response = await fetch(`${API_BASE_URL}/tasks/${taskId}`, {
      method: 'DELETE',
      headers: this.getAuthHeaders()
    });
    
    return this.handleResponse<{ message: string }>(response);
  }

  async archiveTask(taskId: string): Promise<Task> {
    const response = await fetch(`${API_BASE_URL}/tasks/${taskId}/archive`, {
      method: 'PUT',
      headers: this.getAuthHeaders()
    });
    
    return this.handleResponse<Task>(response);
  }

  async uploadTaskFile(taskId: string, file?: File, comment?: string, textContent?: string): Promise<{ task: Task; fileUrl: string }> {
    const formData = new FormData();
    
    if (textContent) {
      // –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
      formData.append('reportType', 'text');
      formData.append('textContent', textContent);
    } else if (file) {
      // –§–∞–π–ª–æ–≤—ã–π –æ—Ç—á–µ—Ç
      formData.append('reportType', 'file');
      formData.append('file', file);
    } else {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∏–±–æ —Ñ–∞–π–ª, –ª–∏–±–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
    }
    
    if (comment) {
      formData.append('comment', comment);
    }
    
    const response = await fetch(`${API_BASE_URL}/tasks/${taskId}/upload`, {
      method: 'POST',
      headers: this.getFormDataHeaders(),
      body: formData
    });
    
    return this.handleResponse<{ task: Task; fileUrl: string }>(response);
  }

  // === UTILITY METHODS ===

  setAuthToken(token: string): void {
    localStorage.setItem('authToken', token);
  }

  removeAuthToken(): void {
    localStorage.removeItem('authToken');
  }

  getAuthToken(): string | null {
    return localStorage.getItem('authToken');
  }

  isAuthenticated(): boolean {
    return !!this.getAuthToken();
  }
}

export const apiClient = new ApiClient();

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
export const mapStatusToRussian = (status: TaskStatusEn): TaskStatusRu => {
  const statusMap: Record<TaskStatusEn, TaskStatusRu> = {
    'ASSIGNED': '–Ω–∞–∑–Ω–∞—á–µ–Ω–æ',
    'IN_PROGRESS': '–≤ —Ä–∞–±–æ—Ç–µ',
    'UNDER_REVIEW': '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
    'COMPLETED': '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
    'REVISION': '–¥–æ—Ä–∞–±–æ—Ç–∫–∞'
  };
  return statusMap[status];
};

export const mapStatusFromRussian = (status: TaskStatus): TaskStatusEn => {
  if (isRussianStatus(status)) {
    const statusMap: Record<TaskStatusRu, TaskStatusEn> = {
      '–Ω–∞–∑–Ω–∞—á–µ–Ω–æ': 'ASSIGNED',
      '–≤ —Ä–∞–±–æ—Ç–µ': 'IN_PROGRESS',
      '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ': 'UNDER_REVIEW',
      '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ': 'COMPLETED',
      '–¥–æ—Ä–∞–±–æ—Ç–∫–∞': 'REVISION'
    };
    return statusMap[status];
  }
  return status as TaskStatusEn;
};

export const mapPriorityToRussian = (priority: TaskPriorityEn): TaskPriorityRu => {
  const priorityMap: Record<TaskPriorityEn, TaskPriorityRu> = {
    'LOW': '–Ω–∏–∑–∫–∏–π',
    'MEDIUM': '—Å—Ä–µ–¥–Ω–∏–π',
    'HIGH': '–≤—ã—Å–æ–∫–∏–π'
  };
  return priorityMap[priority];
};

export const mapPriorityFromRussian = (priority: TaskPriority): TaskPriorityEn => {
  if (isRussianPriority(priority)) {
    const priorityMap: Record<TaskPriorityRu, TaskPriorityEn> = {
      '–Ω–∏–∑–∫–∏–π': 'LOW',
      '—Å—Ä–µ–¥–Ω–∏–π': 'MEDIUM',
      '–≤—ã—Å–æ–∫–∏–π': 'HIGH'
    };
    return priorityMap[priority];
  }
  return priority as TaskPriorityEn;
};

export const mapRoleToRussian = (role: UserRoleEn): UserRoleRu => {
  const roleMap: Record<UserRoleEn, UserRoleRu> = {
    'USER': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    'ADMIN': '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'BOSS': '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'
  };
  return roleMap[role];
};

export const mapRoleFromRussian = (role: UserRole): UserRoleEn => {
  const roleMap: Record<string, UserRoleEn> = {
    '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': 'USER',
    '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': 'ADMIN',
    '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å': 'BOSS'
  };
  return roleMap[role as string] || role as UserRoleEn;
};